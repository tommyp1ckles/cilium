// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
namespace events {
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class StatusUpdateEvent;
class StatusUpdateEventDefaultTypeInternal;
extern StatusUpdateEventDefaultTypeInternal _StatusUpdateEvent_default_instance_;
class StatusUpdateRequest;
class StatusUpdateRequestDefaultTypeInternal;
extern StatusUpdateRequestDefaultTypeInternal _StatusUpdateRequest_default_instance_;
}  // namespace events
PROTOBUF_NAMESPACE_OPEN
template<> ::events::Error* Arena::CreateMaybeMessage<::events::Error>(Arena*);
template<> ::events::StatusUpdateEvent* Arena::CreateMaybeMessage<::events::StatusUpdateEvent>(Arena*);
template<> ::events::StatusUpdateRequest* Arena::CreateMaybeMessage<::events::StatusUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace events {

enum Update : int {
  OK = 0,
  DEGRADED = 1,
  STOPPED = 2,
  Update_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Update_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Update_IsValid(int value);
constexpr Update Update_MIN = OK;
constexpr Update Update_MAX = STOPPED;
constexpr int Update_ARRAYSIZE = Update_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_descriptor();
template<typename T>
inline const std::string& Update_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Update>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Update_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Update_descriptor(), enum_t_value);
}
inline bool Update_Parse(
    const std::string& name, Update* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Update>(
    Update_descriptor(), name, value);
}
// ===================================================================

class StatusUpdateEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:events.StatusUpdateEvent) */ {
 public:
  inline StatusUpdateEvent() : StatusUpdateEvent(nullptr) {};
  virtual ~StatusUpdateEvent();

  StatusUpdateEvent(const StatusUpdateEvent& from);
  StatusUpdateEvent(StatusUpdateEvent&& from) noexcept
    : StatusUpdateEvent() {
    *this = ::std::move(from);
  }

  inline StatusUpdateEvent& operator=(const StatusUpdateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusUpdateEvent& operator=(StatusUpdateEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusUpdateEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusUpdateEvent* internal_default_instance() {
    return reinterpret_cast<const StatusUpdateEvent*>(
               &_StatusUpdateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusUpdateEvent& a, StatusUpdateEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusUpdateEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusUpdateEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusUpdateEvent* New() const final {
    return CreateMaybeMessage<StatusUpdateEvent>(nullptr);
  }

  StatusUpdateEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusUpdateEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusUpdateEvent& from);
  void MergeFrom(const StatusUpdateEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusUpdateEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "events.StatusUpdateEvent";
  }
  protected:
  explicit StatusUpdateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kModuleIdFieldNumber = 4,
    kErrorFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string module_id = 4;
  void clear_module_id();
  const std::string& module_id() const;
  void set_module_id(const std::string& value);
  void set_module_id(std::string&& value);
  void set_module_id(const char* value);
  void set_module_id(const char* value, size_t size);
  std::string* mutable_module_id();
  std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_module_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_module_id(
      std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // .events.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::events::Error& error() const;
  ::events::Error* release_error();
  ::events::Error* mutable_error();
  void set_allocated_error(::events::Error* error);
  private:
  const ::events::Error& _internal_error() const;
  ::events::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::events::Error* error);
  ::events::Error* unsafe_arena_release_error();

  // .events.Update type = 1;
  void clear_type();
  ::events::Update type() const;
  void set_type(::events::Update value);
  private:
  ::events::Update _internal_type() const;
  void _internal_set_type(::events::Update value);
  public:

  // @@protoc_insertion_point(class_scope:events.StatusUpdateEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
  ::events::Error* error_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class StatusUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:events.StatusUpdateRequest) */ {
 public:
  inline StatusUpdateRequest() : StatusUpdateRequest(nullptr) {};
  virtual ~StatusUpdateRequest();

  StatusUpdateRequest(const StatusUpdateRequest& from);
  StatusUpdateRequest(StatusUpdateRequest&& from) noexcept
    : StatusUpdateRequest() {
    *this = ::std::move(from);
  }

  inline StatusUpdateRequest& operator=(const StatusUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusUpdateRequest& operator=(StatusUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const StatusUpdateRequest*>(
               &_StatusUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatusUpdateRequest& a, StatusUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusUpdateRequest* New() const final {
    return CreateMaybeMessage<StatusUpdateRequest>(nullptr);
  }

  StatusUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusUpdateRequest& from);
  void MergeFrom(const StatusUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "events.StatusUpdateRequest";
  }
  protected:
  explicit StatusUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:events.StatusUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:events.Error) */ {
 public:
  inline Error() : Error(nullptr) {};
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "events.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrappedFieldNumber = 2,
    kHelpFieldNumber = 3,
    kMessageFieldNumber = 1,
  };
  // repeated .events.Error wrapped = 2;
  int wrapped_size() const;
  private:
  int _internal_wrapped_size() const;
  public:
  void clear_wrapped();
  ::events::Error* mutable_wrapped(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::events::Error >*
      mutable_wrapped();
  private:
  const ::events::Error& _internal_wrapped(int index) const;
  ::events::Error* _internal_add_wrapped();
  public:
  const ::events::Error& wrapped(int index) const;
  ::events::Error* add_wrapped();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::events::Error >&
      wrapped() const;

  // repeated string help = 3;
  int help_size() const;
  private:
  int _internal_help_size() const;
  public:
  void clear_help();
  const std::string& help(int index) const;
  std::string* mutable_help(int index);
  void set_help(int index, const std::string& value);
  void set_help(int index, std::string&& value);
  void set_help(int index, const char* value);
  void set_help(int index, const char* value, size_t size);
  std::string* add_help();
  void add_help(const std::string& value);
  void add_help(std::string&& value);
  void add_help(const char* value);
  void add_help(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& help() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_help();
  private:
  const std::string& _internal_help(int index) const;
  std::string* _internal_add_help();
  public:

  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:events.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::events::Error > wrapped_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> help_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusUpdateEvent

// .events.Update type = 1;
inline void StatusUpdateEvent::clear_type() {
  type_ = 0;
}
inline ::events::Update StatusUpdateEvent::_internal_type() const {
  return static_cast< ::events::Update >(type_);
}
inline ::events::Update StatusUpdateEvent::type() const {
  // @@protoc_insertion_point(field_get:events.StatusUpdateEvent.type)
  return _internal_type();
}
inline void StatusUpdateEvent::_internal_set_type(::events::Update value) {
  
  type_ = value;
}
inline void StatusUpdateEvent::set_type(::events::Update value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:events.StatusUpdateEvent.type)
}

// string message = 2;
inline void StatusUpdateEvent::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusUpdateEvent::message() const {
  // @@protoc_insertion_point(field_get:events.StatusUpdateEvent.message)
  return _internal_message();
}
inline void StatusUpdateEvent::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:events.StatusUpdateEvent.message)
}
inline std::string* StatusUpdateEvent::mutable_message() {
  // @@protoc_insertion_point(field_mutable:events.StatusUpdateEvent.message)
  return _internal_mutable_message();
}
inline const std::string& StatusUpdateEvent::_internal_message() const {
  return message_.Get();
}
inline void StatusUpdateEvent::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusUpdateEvent::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:events.StatusUpdateEvent.message)
}
inline void StatusUpdateEvent::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:events.StatusUpdateEvent.message)
}
inline void StatusUpdateEvent::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:events.StatusUpdateEvent.message)
}
inline std::string* StatusUpdateEvent::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusUpdateEvent::release_message() {
  // @@protoc_insertion_point(field_release:events.StatusUpdateEvent.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusUpdateEvent::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:events.StatusUpdateEvent.message)
}
inline std::string* StatusUpdateEvent::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:events.StatusUpdateEvent.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusUpdateEvent::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:events.StatusUpdateEvent.message)
}

// .events.Error error = 3;
inline bool StatusUpdateEvent::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool StatusUpdateEvent::has_error() const {
  return _internal_has_error();
}
inline void StatusUpdateEvent::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::events::Error& StatusUpdateEvent::_internal_error() const {
  const ::events::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::events::Error*>(
      &::events::_Error_default_instance_);
}
inline const ::events::Error& StatusUpdateEvent::error() const {
  // @@protoc_insertion_point(field_get:events.StatusUpdateEvent.error)
  return _internal_error();
}
inline void StatusUpdateEvent::unsafe_arena_set_allocated_error(
    ::events::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:events.StatusUpdateEvent.error)
}
inline ::events::Error* StatusUpdateEvent::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::events::Error* StatusUpdateEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:events.StatusUpdateEvent.error)
  
  ::events::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::events::Error* StatusUpdateEvent::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::events::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::events::Error* StatusUpdateEvent::mutable_error() {
  // @@protoc_insertion_point(field_mutable:events.StatusUpdateEvent.error)
  return _internal_mutable_error();
}
inline void StatusUpdateEvent::set_allocated_error(::events::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:events.StatusUpdateEvent.error)
}

// string module_id = 4;
inline void StatusUpdateEvent::clear_module_id() {
  module_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusUpdateEvent::module_id() const {
  // @@protoc_insertion_point(field_get:events.StatusUpdateEvent.module_id)
  return _internal_module_id();
}
inline void StatusUpdateEvent::set_module_id(const std::string& value) {
  _internal_set_module_id(value);
  // @@protoc_insertion_point(field_set:events.StatusUpdateEvent.module_id)
}
inline std::string* StatusUpdateEvent::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable:events.StatusUpdateEvent.module_id)
  return _internal_mutable_module_id();
}
inline const std::string& StatusUpdateEvent::_internal_module_id() const {
  return module_id_.Get();
}
inline void StatusUpdateEvent::_internal_set_module_id(const std::string& value) {
  
  module_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusUpdateEvent::set_module_id(std::string&& value) {
  
  module_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:events.StatusUpdateEvent.module_id)
}
inline void StatusUpdateEvent::set_module_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:events.StatusUpdateEvent.module_id)
}
inline void StatusUpdateEvent::set_module_id(const char* value,
    size_t size) {
  
  module_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:events.StatusUpdateEvent.module_id)
}
inline std::string* StatusUpdateEvent::_internal_mutable_module_id() {
  
  return module_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusUpdateEvent::release_module_id() {
  // @@protoc_insertion_point(field_release:events.StatusUpdateEvent.module_id)
  return module_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusUpdateEvent::set_allocated_module_id(std::string* module_id) {
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:events.StatusUpdateEvent.module_id)
}
inline std::string* StatusUpdateEvent::unsafe_arena_release_module_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:events.StatusUpdateEvent.module_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return module_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusUpdateEvent::unsafe_arena_set_allocated_module_id(
    std::string* module_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      module_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:events.StatusUpdateEvent.module_id)
}

// -------------------------------------------------------------------

// StatusUpdateRequest

// -------------------------------------------------------------------

// Error

// string message = 1;
inline void Error::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:events.Error.message)
  return _internal_message();
}
inline void Error::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:events.Error.message)
}
inline std::string* Error::mutable_message() {
  // @@protoc_insertion_point(field_mutable:events.Error.message)
  return _internal_mutable_message();
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:events.Error.message)
}
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:events.Error.message)
}
inline void Error::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:events.Error.message)
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:events.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:events.Error.message)
}
inline std::string* Error::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:events.Error.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Error::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:events.Error.message)
}

// repeated .events.Error wrapped = 2;
inline int Error::_internal_wrapped_size() const {
  return wrapped_.size();
}
inline int Error::wrapped_size() const {
  return _internal_wrapped_size();
}
inline void Error::clear_wrapped() {
  wrapped_.Clear();
}
inline ::events::Error* Error::mutable_wrapped(int index) {
  // @@protoc_insertion_point(field_mutable:events.Error.wrapped)
  return wrapped_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::events::Error >*
Error::mutable_wrapped() {
  // @@protoc_insertion_point(field_mutable_list:events.Error.wrapped)
  return &wrapped_;
}
inline const ::events::Error& Error::_internal_wrapped(int index) const {
  return wrapped_.Get(index);
}
inline const ::events::Error& Error::wrapped(int index) const {
  // @@protoc_insertion_point(field_get:events.Error.wrapped)
  return _internal_wrapped(index);
}
inline ::events::Error* Error::_internal_add_wrapped() {
  return wrapped_.Add();
}
inline ::events::Error* Error::add_wrapped() {
  // @@protoc_insertion_point(field_add:events.Error.wrapped)
  return _internal_add_wrapped();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::events::Error >&
Error::wrapped() const {
  // @@protoc_insertion_point(field_list:events.Error.wrapped)
  return wrapped_;
}

// repeated string help = 3;
inline int Error::_internal_help_size() const {
  return help_.size();
}
inline int Error::help_size() const {
  return _internal_help_size();
}
inline void Error::clear_help() {
  help_.Clear();
}
inline std::string* Error::add_help() {
  // @@protoc_insertion_point(field_add_mutable:events.Error.help)
  return _internal_add_help();
}
inline const std::string& Error::_internal_help(int index) const {
  return help_.Get(index);
}
inline const std::string& Error::help(int index) const {
  // @@protoc_insertion_point(field_get:events.Error.help)
  return _internal_help(index);
}
inline std::string* Error::mutable_help(int index) {
  // @@protoc_insertion_point(field_mutable:events.Error.help)
  return help_.Mutable(index);
}
inline void Error::set_help(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:events.Error.help)
  help_.Mutable(index)->assign(value);
}
inline void Error::set_help(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:events.Error.help)
  help_.Mutable(index)->assign(std::move(value));
}
inline void Error::set_help(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  help_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:events.Error.help)
}
inline void Error::set_help(int index, const char* value, size_t size) {
  help_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:events.Error.help)
}
inline std::string* Error::_internal_add_help() {
  return help_.Add();
}
inline void Error::add_help(const std::string& value) {
  help_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:events.Error.help)
}
inline void Error::add_help(std::string&& value) {
  help_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:events.Error.help)
}
inline void Error::add_help(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  help_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:events.Error.help)
}
inline void Error::add_help(const char* value, size_t size) {
  help_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:events.Error.help)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Error::help() const {
  // @@protoc_insertion_point(field_list:events.Error.help)
  return help_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Error::mutable_help() {
  // @@protoc_insertion_point(field_mutable_list:events.Error.help)
  return &help_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::events::Update> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::events::Update>() {
  return ::events::Update_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
