// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: events.proto

#include "events.pb.h"
#include "events.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace events {

static const char* FlightRecorder_method_names[] = {
  "/events.FlightRecorder/GetStatus",
};

std::unique_ptr< FlightRecorder::Stub> FlightRecorder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlightRecorder::Stub> stub(new FlightRecorder::Stub(channel));
  return stub;
}

FlightRecorder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStatus_(FlightRecorder_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::events::StatusUpdateEvent>* FlightRecorder::Stub::GetStatusRaw(::grpc::ClientContext* context, const ::events::StatusUpdateRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::events::StatusUpdateEvent>::Create(channel_.get(), rpcmethod_GetStatus_, context, request);
}

void FlightRecorder::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, ::events::StatusUpdateRequest* request, ::grpc::experimental::ClientReadReactor< ::events::StatusUpdateEvent>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::events::StatusUpdateEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::events::StatusUpdateEvent>* FlightRecorder::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::events::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::events::StatusUpdateEvent>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::events::StatusUpdateEvent>* FlightRecorder::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::events::StatusUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::events::StatusUpdateEvent>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false, nullptr);
}

FlightRecorder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightRecorder_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FlightRecorder::Service, ::events::StatusUpdateRequest, ::events::StatusUpdateEvent>(
          [](FlightRecorder::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::events::StatusUpdateRequest* req,
             ::grpc_impl::ServerWriter<::events::StatusUpdateEvent>* writer) {
               return service->GetStatus(ctx, req, writer);
             }, this)));
}

FlightRecorder::Service::~Service() {
}

::grpc::Status FlightRecorder::Service::GetStatus(::grpc::ServerContext* context, const ::events::StatusUpdateRequest* request, ::grpc::ServerWriter< ::events::StatusUpdateEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace events

