// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MapEventLogEntry Event on Map
//
// swagger:model MapEventLogEntry
type MapEventLogEntry struct {

	// Optional debugging field that describes what address event was invoked from.
	CallerContext string `json:"caller-context,omitempty"`

	// Desired action to be performed after this event
	// Enum: [ok insert delete]
	DesiredAction string `json:"desired-action,omitempty"`

	// Map key on which the event occured
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// Last error seen while performing desired action
	LastError string `json:"last-error,omitempty"`

	// Timestamp when the event occurred
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// Map value on which the event occured
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this map event log entry
func (m *MapEventLogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mapEventLogEntryTypeDesiredActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","insert","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mapEventLogEntryTypeDesiredActionPropEnum = append(mapEventLogEntryTypeDesiredActionPropEnum, v)
	}
}

const (

	// MapEventLogEntryDesiredActionOk captures enum value "ok"
	MapEventLogEntryDesiredActionOk string = "ok"

	// MapEventLogEntryDesiredActionInsert captures enum value "insert"
	MapEventLogEntryDesiredActionInsert string = "insert"

	// MapEventLogEntryDesiredActionDelete captures enum value "delete"
	MapEventLogEntryDesiredActionDelete string = "delete"
)

// prop value enum
func (m *MapEventLogEntry) validateDesiredActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mapEventLogEntryTypeDesiredActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MapEventLogEntry) validateDesiredAction(formats strfmt.Registry) error {

	if swag.IsZero(m.DesiredAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDesiredActionEnum("desired-action", "body", m.DesiredAction); err != nil {
		return err
	}

	return nil
}

func (m *MapEventLogEntry) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MapEventLogEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MapEventLogEntry) UnmarshalBinary(b []byte) error {
	var res MapEventLogEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
