// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: events/events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlightRecorder_GetStatus_FullMethodName = "/events.FlightRecorder/GetStatus"
)

// FlightRecorderClient is the client API for FlightRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightRecorderClient interface {
	// Record can start and stop a single recording. The recording is
	// automatically stopped if the client aborts this rpc call.
	GetStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (FlightRecorder_GetStatusClient, error)
}

type flightRecorderClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightRecorderClient(cc grpc.ClientConnInterface) FlightRecorderClient {
	return &flightRecorderClient{cc}
}

func (c *flightRecorderClient) GetStatus(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (FlightRecorder_GetStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlightRecorder_ServiceDesc.Streams[0], FlightRecorder_GetStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flightRecorderGetStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlightRecorder_GetStatusClient interface {
	Recv() (*StatusUpdateEvent, error)
	grpc.ClientStream
}

type flightRecorderGetStatusClient struct {
	grpc.ClientStream
}

func (x *flightRecorderGetStatusClient) Recv() (*StatusUpdateEvent, error) {
	m := new(StatusUpdateEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlightRecorderServer is the server API for FlightRecorder service.
// All implementations should embed UnimplementedFlightRecorderServer
// for forward compatibility
type FlightRecorderServer interface {
	// Record can start and stop a single recording. The recording is
	// automatically stopped if the client aborts this rpc call.
	GetStatus(*StatusUpdateRequest, FlightRecorder_GetStatusServer) error
}

// UnimplementedFlightRecorderServer should be embedded to have forward compatible implementations.
type UnimplementedFlightRecorderServer struct {
}

func (UnimplementedFlightRecorderServer) GetStatus(*StatusUpdateRequest, FlightRecorder_GetStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}

// UnsafeFlightRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightRecorderServer will
// result in compilation errors.
type UnsafeFlightRecorderServer interface {
	mustEmbedUnimplementedFlightRecorderServer()
}

func RegisterFlightRecorderServer(s grpc.ServiceRegistrar, srv FlightRecorderServer) {
	s.RegisterService(&FlightRecorder_ServiceDesc, srv)
}

func _FlightRecorder_GetStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlightRecorderServer).GetStatus(m, &flightRecorderGetStatusServer{stream})
}

type FlightRecorder_GetStatusServer interface {
	Send(*StatusUpdateEvent) error
	grpc.ServerStream
}

type flightRecorderGetStatusServer struct {
	grpc.ServerStream
}

func (x *flightRecorderGetStatusServer) Send(m *StatusUpdateEvent) error {
	return x.ServerStream.SendMsg(m)
}

// FlightRecorder_ServiceDesc is the grpc.ServiceDesc for FlightRecorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightRecorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.FlightRecorder",
	HandlerType: (*FlightRecorderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStatus",
			Handler:       _FlightRecorder_GetStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events/events.proto",
}
